datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma/client"
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  email          String         @unique
  username       String
  provider       String
  hashedPassword String
  coins          Int?
  avatarUrl      String?
  bio            String?
  verified       Boolean
  conversations  Conversation[]
  rateEditings   RateEditing[]
}

model Verification {
  email   String   @id @map("_id")
  token   String
  expires DateTime
}

model Conversation {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  contributor   User?                @relation(fields: [contributorId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  contributorId String               @db.ObjectId
  records       ConversationRecord[]
}

model ConversationRecord {
  id                       String               @id @default(auto()) @map("_id") @db.ObjectId
  rounds                   ConversationRound[]
  conversation             Conversation         @relation(fields: [conversationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  conversationId           String               @db.ObjectId
  prevConversationRecordId String?              @db.ObjectId
  prevConversationRecord   ConversationRecord?  @relation("conversationTree", fields: [prevConversationRecordId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  nextConversationRecords  ConversationRecord[] @relation("conversationTree")
  modelName                String
  rating                   Int?
  rateEditings             RateEditing[]
}

type ConversationRound {
  prompt     String
  completion String
}

model Trail {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  ip    String @unique
  quota Int
}

model RateEditing {
  id                         String             @id @default(auto()) @map("_id") @db.ObjectId
  conversationRecordId       String             @db.ObjectId
  conversationRecord         ConversationRecord @relation(fields: [conversationRecordId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  msgIndex                   Int
  contributorId              String             @db.ObjectId
  contributor                User               @relation(fields: [contributorId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  model                      String
  originalPrompt             String
  editedPrompt               String
  totalPromptEditedScore     Float
  originalCompletion         String
  editedCompletion           String
  totalCompletionEditedScore Float
  scores                     Score[]
}

type Score {
  completionEditedScore Int
  promptEditedScore     Int
  raterId               String  @db.ObjectId
  feedback              String?
}
